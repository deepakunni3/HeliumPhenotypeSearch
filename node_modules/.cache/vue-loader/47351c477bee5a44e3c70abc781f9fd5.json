{"remainingRequest":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/src/components/ResultsTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/src/components/ResultsTable.vue","mtime":1539654549737},{"path":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/cache-loader/dist/cjs.js","mtime":1539379416466},{"path":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/cache-loader/dist/cjs.js","mtime":1539379416466},{"path":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as BL from '@/api/BioLink';\n\nexport default {\n  name: 'ResultTable',\n  props: {\n    value: {\n      type: Object,\n      required: true,\n    }\n  },\n  computed : {\n    searchTerm () {\n      return this.value.searchTerm;\n    },\n    searchCategory () {\n      return this.value.category;\n    },\n  },\n  data() {\n    return {\n      currentPage: 1,\n      fields: ['index', 'match', 'category', 'curie',],\n      items: []\n    };\n  },\n  mounted() {\n    this.fetchData();\n  },\n  methods: {\n    async fetchData() {\n      try {\n        const selected = this.searchCategory;\n        const searchResponse = await BL.getSearchTermSuggestions(this.searchTerm, selected, 500);\n        this.items = [];\n        this.current = -1;\n        searchResponse.docs.forEach((elem) => {\n          const resultPacket = {\n            match: elem.match,\n            category: this.categoryMap(elem.category),\n            taxon: this.checkTaxon(elem.taxon_label),\n            curie: elem.id,\n            highlight: elem.highlight,\n            has_hl: elem.has_highlight\n          };\n          this.items.push(resultPacket);\n        });\n        this.open = true;\n        this.loading = false;\n      }\n      catch (e) {\n        console.log('nodeResponse ERROR', e, this);\n      }\n    },\n    categoryMap(catList) {\n      const validCats = {\n        'gene': 'gene',\n        'variant locus': 'variant',\n        'Phenotype': 'phenotype',\n        'genotype': 'genotype',\n        'disease': 'disease'\n      };\n      const categoryObj = catList.reduce((map, cat) => {\n        const catKey = validCats[cat];\n        if (catKey) {\n          map[catKey] = catKey;\n        }\n        return map;\n      }, {});\n      return categoryObj.gene\n        || categoryObj.variant\n        || Object.keys(categoryObj).join(',');\n    },\n    checkTaxon(taxon) {\n      if (typeof taxon === 'string') {\n        return taxon;\n      }\n      return null;\n    },\n    emitSelection(row) {\n      this.$emit('resultInterface', row);\n    },\n  },\n};\n",{"version":3,"sources":["ResultsTable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ResultsTable.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"py-2\">\n    {{items.length}} total terms found\n    <b-table\n        small\n        striped\n        hover\n        bordered\n        :per-page=10\n        :current-page=\"currentPage\"\n        :items=\"items\"\n        :fields=\"fields\"\n        @row-clicked=\"emitSelection\"\n    >\n      <!-- A virtual column -->\n      <template slot=\"index\" slot-scope=\"data\">\n        {{data.index + 1}}\n      </template>\n      <!-- A custom formatted column -->\n      <template slot=\"data\" slot-scope=\"data\">\n        {{data.value.match}}\n      </template>\n      <!-- A virtual composite column -->\n      <template slot=\"data\" slot-scope=\"data\">\n        {{data.value.category}}\n      </template>\n      <template slot=\"data\" slot-scope=\"data\">\n        {{data.value.curie}}\n      </template>\n    </b-table>\n    <b-pagination\n        align=\"center\"\n        size=\"md\"\n        :total-rows=\"items.length\"\n        v-model=\"currentPage\"\n        :per-page=\"10\">\n    </b-pagination>\n  </div>\n</template>\n<script>\n  import * as BL from '@/api/BioLink';\n\n  export default {\n    name: 'ResultTable',\n    props: {\n      value: {\n        type: Object,\n        required: true,\n      }\n    },\n    computed : {\n      searchTerm () {\n        return this.value.searchTerm;\n      },\n      searchCategory () {\n        return this.value.category;\n      },\n    },\n    data() {\n      return {\n        currentPage: 1,\n        fields: ['index', 'match', 'category', 'curie',],\n        items: []\n      };\n    },\n    mounted() {\n      this.fetchData();\n    },\n    methods: {\n      async fetchData() {\n        try {\n          const selected = this.searchCategory;\n          const searchResponse = await BL.getSearchTermSuggestions(this.searchTerm, selected, 500);\n          this.items = [];\n          this.current = -1;\n          searchResponse.docs.forEach((elem) => {\n            const resultPacket = {\n              match: elem.match,\n              category: this.categoryMap(elem.category),\n              taxon: this.checkTaxon(elem.taxon_label),\n              curie: elem.id,\n              highlight: elem.highlight,\n              has_hl: elem.has_highlight\n            };\n            this.items.push(resultPacket);\n          });\n          this.open = true;\n          this.loading = false;\n        }\n        catch (e) {\n          console.log('nodeResponse ERROR', e, this);\n        }\n      },\n      categoryMap(catList) {\n        const validCats = {\n          'gene': 'gene',\n          'variant locus': 'variant',\n          'Phenotype': 'phenotype',\n          'genotype': 'genotype',\n          'disease': 'disease'\n        };\n        const categoryObj = catList.reduce((map, cat) => {\n          const catKey = validCats[cat];\n          if (catKey) {\n            map[catKey] = catKey;\n          }\n          return map;\n        }, {});\n        return categoryObj.gene\n          || categoryObj.variant\n          || Object.keys(categoryObj).join(',');\n      },\n      checkTaxon(taxon) {\n        if (typeof taxon === 'string') {\n          return taxon;\n        }\n        return null;\n      },\n      emitSelection(row) {\n        this.$emit('resultInterface', row);\n      },\n    },\n  };\n</script>\n<style></style>\n"]}]}