{"remainingRequest":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/src/components/MonarchAssociations.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/src/components/MonarchAssociations.vue","mtime":1539630456983},{"path":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/cache-loader/dist/cjs.js","mtime":1539379416466},{"path":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as BL from '@/api/BioLink';\n\nexport default {\n  name: 'MonarchAssociations',\n  props: {\n    curie: {\n      type: String,\n      required: true,\n    },\n    category: {\n      type: String,\n      required: true,\n    }\n  },\n  data() {\n    return {\n      geneData: '',\n      genotypeData: '',\n      variantData: '',\n      diseaseData: '',\n      literatureData: '',\n      phenotypeData: '',\n      dataPacket: '',\n    };\n  },\n  computed: {\n    monarchUrl() {\n      return `https://monarch-initiative.github.io/monarch-ui/${this.category}/${this.curie}`\n    }\n  },\n  mounted(){\n    this.fetchData(this.curie, this.category);\n    this.fetchAssociations(this.category, this.curie, 'gene');\n    this.fetchAssociations(this.category, this.curie, 'disease');\n    this.fetchAssociations(this.category, this.curie, 'genotype');\n    this.fetchAssociations(this.category, this.curie, 'literature');\n    this.fetchAssociations(this.category, this.curie, 'variant');\n  },\n  watch: {\n    curie: function () {\n      this.fetchData(this.curie, this.category);\n      this.fetchAssociations(this.category, this.curie, 'gene');\n      this.fetchAssociations(this.category, this.curie, 'disease');\n      this.fetchAssociations(this.category, this.curie, 'genotype');\n      this.fetchAssociations(this.category, this.curie, 'literature');\n      this.fetchAssociations(this.category, this.curie, 'variant');\n    }\n  },\n  methods: {\n    async fetchData(nodeID, nodeType) {\n      try {\n        const searchResponse = await BL.getNodeSummary(nodeID, nodeType);\n        this.dataPacket = searchResponse;\n      }\n      catch (e) {\n        console.log('nodeResponse ERROR', e, this);\n      }\n    },\n    async fetchAssociations(nodeType, nodeID, cardType) {\n      try {\n        const searchResponse = await BL.getNodeAssociations(nodeType, nodeID, cardType, {'rows': 50000});\n        if (cardType === 'gene') {\n          this.geneData = searchResponse;\n        }\n        if (cardType === 'disease') {\n          this.diseaseData = searchResponse;\n        }\n        if (cardType === 'genotype') {\n          this.genotypeData = searchResponse;\n        }\n        if (cardType === 'literature') {\n          this.literatureData = searchResponse;\n        }\n        if (cardType === 'variant') {\n          this.variantData = searchResponse;\n        }\n      }\n      catch (e) {\n        console.log('nodeResponse ERROR', e, this);\n      }\n    },\n  },\n};\n",{"version":3,"sources":["MonarchAssociations.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"MonarchAssociations.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"card\">\n    <div class=\"card-header\">Monarch Data\n\n    </div>\n    <div class=\"card-body\">\n\n      <div class=\"p-2\"><strong>Label:</strong><br/><a v-bind:href=\"monarchUrl\">{{dataPacket.label}}</a></div>\n      <div class=\"p-2\"><strong>Identifier:</strong><br/>{{dataPacket.id}}</div>\n      <div class=\"p-2\"><strong>Description:</strong><br/>{{dataPacket.description}}</div>\n      <div class=\"p-2\"><strong>Associations:</strong>\n        <div\n            class=\"p-2\"\n            v-if=\"geneData\"\n        >\n          Genes:\n          {{geneData.data.associations.length}}\n        </div>\n        <div\n            class=\"p-2\"\n            v-if=\"diseaseData\"\n        >\n          Diseases:\n          {{diseaseData.data.associations.length}}\n        </div>\n        <div\n            class=\"p-2\"\n            v-if=\"variantData\"\n        >\n          Variants:\n          {{variantData.data.associations.length}}\n        </div>\n        <div\n            class=\"p-2\"\n            v-if=\"genotypeData\"\n        >\n          Genotypes:\n          {{genotypeData.data.associations.length}}\n        </div>\n        <div\n            class=\"p-2\"\n            v-if=\"phenotypeData\"\n        >\n          Phenotypes:\n          {{phenotypeData.data.associations.length}}\n        </div>\n        <div\n            class=\"p-2\"\n            v-if=\"literatureData\"\n        >\n          Literature:\n          {{literatureData.data.associations.length}}\n        </div>\n      </div>\n    </div>\n\n  </div>\n</template>\n<script>\n  import * as BL from '@/api/BioLink';\n\n  export default {\n    name: 'MonarchAssociations',\n    props: {\n      curie: {\n        type: String,\n        required: true,\n      },\n      category: {\n        type: String,\n        required: true,\n      }\n    },\n    data() {\n      return {\n        geneData: '',\n        genotypeData: '',\n        variantData: '',\n        diseaseData: '',\n        literatureData: '',\n        phenotypeData: '',\n        dataPacket: '',\n      };\n    },\n    computed: {\n      monarchUrl() {\n        return `https://monarch-initiative.github.io/monarch-ui/${this.category}/${this.curie}`\n      }\n    },\n    mounted(){\n      this.fetchData(this.curie, this.category);\n      this.fetchAssociations(this.category, this.curie, 'gene');\n      this.fetchAssociations(this.category, this.curie, 'disease');\n      this.fetchAssociations(this.category, this.curie, 'genotype');\n      this.fetchAssociations(this.category, this.curie, 'literature');\n      this.fetchAssociations(this.category, this.curie, 'variant');\n    },\n    watch: {\n      curie: function () {\n        this.fetchData(this.curie, this.category);\n        this.fetchAssociations(this.category, this.curie, 'gene');\n        this.fetchAssociations(this.category, this.curie, 'disease');\n        this.fetchAssociations(this.category, this.curie, 'genotype');\n        this.fetchAssociations(this.category, this.curie, 'literature');\n        this.fetchAssociations(this.category, this.curie, 'variant');\n      }\n    },\n    methods: {\n      async fetchData(nodeID, nodeType) {\n        try {\n          const searchResponse = await BL.getNodeSummary(nodeID, nodeType);\n          this.dataPacket = searchResponse;\n        }\n        catch (e) {\n          console.log('nodeResponse ERROR', e, this);\n        }\n      },\n      async fetchAssociations(nodeType, nodeID, cardType) {\n        try {\n          const searchResponse = await BL.getNodeAssociations(nodeType, nodeID, cardType, {'rows': 50000});\n          if (cardType === 'gene') {\n            this.geneData = searchResponse;\n          }\n          if (cardType === 'disease') {\n            this.diseaseData = searchResponse;\n          }\n          if (cardType === 'genotype') {\n            this.genotypeData = searchResponse;\n          }\n          if (cardType === 'literature') {\n            this.literatureData = searchResponse;\n          }\n          if (cardType === 'variant') {\n            this.variantData = searchResponse;\n          }\n        }\n        catch (e) {\n          console.log('nodeResponse ERROR', e, this);\n        }\n      },\n    },\n  };\n</script>\n<style></style>\n"]}]}