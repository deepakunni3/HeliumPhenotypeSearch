{"remainingRequest":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/src/components/MonarchAutocomplete.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/src/components/MonarchAutocomplete.vue","mtime":1539642390912},{"path":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/cache-loader/dist/cjs.js","mtime":1539379416466},{"path":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/cache-loader/dist/cjs.js","mtime":1539379416466},{"path":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as BL from '@/api/BioLink';\n\nconst debounce = require('lodash/debounce');\n\nconst exampleSearches = [\n  {\n    searchString: 'Marfan Syndrome'\n  },\n  {\n    searchString: 'Spinocerebellar Ataxia 2',\n    category: 'disease'\n  },\n  {\n    searchString: 'Multicystic kidney dysplasia',\n    category: 'Phenotype'\n  },\n  {\n    searchString: 'Shh',\n    category: 'gene'\n  }\n];\nexport default {\n  name: 'AutoComplete',\n  filters: {\n    allLower(word) {\n      return word.toLowerCase();\n    }\n  },\n  props: {\n    showSearchButton: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    autoFocus: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    homeSearch: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    singleCategory: {\n      type: String,\n      required: false,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      destroying: false,\n      exampleSearches,\n      selected: 'Phenotype',\n      options: [\n        { text: 'Gene', value: 'gene' },\n        { text: 'Phenotype', value: 'Phenotype' },\n      ],\n      catDropDown: false,\n      value: '',\n      suggestions: [],\n      open: false,\n      current: -1,\n      loading: false\n    };\n  },\n  watch: {\n    value() {\n      if (!this.value) {\n        this.open = false;\n      }\n    },\n    selected(newValue) {\n      this.value = '';\n      this.fetchData();\n\n      }\n  },\n  beforeDestroy() {\n    this.destroying = true;\n  },\n  methods: {\n    debounceInput: debounce(\n      function debounceInput() {\n        if (!this.destroying) {\n          this.fetchData();\n        }\n      }, 500, { leading: false, trailing: true }\n    ),\n    async fetchData() {\n      try {\n        const selected = this.selected;\n        const searchResponse = await BL.getSearchTermSuggestions(this.value, selected);\n        this.suggestions = [];\n        this.current = -1;\n        searchResponse.docs.forEach((elem) => {\n          const resultPacket = {\n            match: elem.match,\n            category: this.categoryMap(elem.category),\n            taxon: this.checkTaxon(elem.taxon_label),\n            curie: elem.id,\n            highlight: elem.highlight,\n            has_hl: elem.has_highlight\n          };\n          this.suggestions.push(resultPacket);\n        });\n        this.open = true;\n        this.loading = false;\n      }\n      catch (e) {\n        console.log('nodeResponse ERROR', e, this);\n      }\n    },\n    enter() {\n      const currentData = this.suggestions[this.current];\n      if (currentData) {\n        currentData['selected'] = true;\n        console.log(currentData);\n        this.$emit('interface', currentData);\n      }\n      else {\n        this.showMore();\n      }\n      this.value = '';\n      this.open = false;\n      this.suggestions = [];\n    },\n    up() {\n      if (this.current > 0) {\n        this.current -= 1;\n      }\n    },\n    toggleFilterBox() {\n      this.catDropDown = !this.catDropDown;\n    },\n    inputChanged() {\n      this.catDropDown = false;\n    },\n    down() {\n      if (this.current < this.suggestions.length - 1) {\n        this.current += 1;\n      }\n    },\n    isActive(index) {\n      return index === this.current;\n    },\n    mouseOver(index) {\n      this.current = index;\n    },\n    suggestionClick(index) {\n      const currentData = this.suggestions[index];\n      currentData['selected'] = true;\n      this.$emit('interface', currentData);\n      this.value = '';\n      this.open = false;\n      this.suggestions = [];\n    },\n    showMore() {\n      this.$emit('interface',\n        { selected: false,\n          searchTerm: this.value,\n          category: 'Phenotype',\n      });\n    },\n    clearSearch() {\n      this.suggestions = [];\n      this.open = false;\n    },\n    categoryMap(catList) {\n      const validCats = {\n        'gene': 'gene',\n        'variant locus': 'variant',\n        'Phenotype': 'phenotype',\n        'genotype': 'genotype',\n        'disease': 'disease'\n      };\n      const categoryObj = catList.reduce((map, cat) => {\n        const catKey = validCats[cat];\n        if (catKey) {\n          map[catKey] = catKey;\n        }\n        return map;\n      }, {});\n      return categoryObj.gene\n        || categoryObj.variant\n        || Object.keys(categoryObj).join(',');\n    },\n    checkTaxon(taxon) {\n      if (typeof taxon === 'string') {\n        return taxon;\n      }\n      return null;\n    },\n    useExample(searchString, category) {\n      this.selected = [];\n      if (category) {\n        this.selected.push(category);\n      }\n      this.value = searchString;\n    }\n  },\n};\n",{"version":3,"sources":["MonarchAutocomplete.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"MonarchAutocomplete.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div\n    :class=\"{\n      'home-search':homeSearch,\n      'open':open\n    }\"\n    class=\"monarch-autocomplete autocomplete autorootdiv\"\n  >\n    <div\n      :class=\"{'input-group-sm': !homeSearch}\"\n      class=\"input-group\"\n    >\n      <input\n        :class=\"{'loading': loading}\"\n        v-model=\"value\"\n        class=\"form-control xform-control-sm\"\n        type=\"text\"\n        autofocus=\"autoFocus\"\n        placeholder=\"Search\"\n        @input=\"debounceInput\"\n        @keydown=\"inputChanged\"\n        @keydown.enter=\"enter\"\n        @keydown.down=\"down\"\n        @keydown.up=\"up\"\n        @keydown.esc=\"clearSearch\"\n        @blur=\"clearSearch\"\n      >\n      <div\n        class=\"input-group-append\">\n        <button\n          v-b-tooltip.topright\n          class=\"btn xbtn-sm btn-light py-0\"\n          type=\"button\"\n          title=\"Show all matching results\"\n          @click=\"showMore\"\n        >\n          search\n          <!--<i class=\"p-0 m-0/>-->\n        </button>\n      </div>\n      <div\n        v-if=\"open\"\n        class=\"dropdown-menu list-group dropList px-4\"\n        style=\"overflow-y:auto;\"\n      >\n        <!--\n          @blur above hides @click. Use @mousedown instead\n          https://stackoverflow.com/a/50313781/5667222\n        -->\n        <div\n          v-for=\"(suggestion, index) in suggestions\"\n          :key=\"index\"\n          :class=\"{'active': isActive(index)}\"\n          class=\"border-bottom px-1\"\n          @mousedown=\"suggestionClick(index)\"\n          @mouseover=\"mouseOver(index)\"\n        >\n          <div class=\"row p-0\">\n            <div\n              v-if=\"suggestion.has_hl\"\n              class=\"col-5\"\n            >\n              <span v-html=\"suggestion.highlight\"/>\n            </div>\n            <div\n              v-else\n              class=\"col-5\"\n            >\n              <strong>{{ suggestion.match }}</strong>\n            </div>\n            <div class=\"col-4\"><i>{{ suggestion.taxon }}</i></div>\n            <div class=\"col-3 text-align-right\">\n              <small>{{ suggestion.category }}</small>\n            </div>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div\n            v-if=\"suggestions.length === 0\"\n            class=\"btn col m-2\"\n          >\n            No results for '{{ value }}'\n          </div>\n\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport * as BL from '@/api/BioLink';\n\nconst debounce = require('lodash/debounce');\n\nconst exampleSearches = [\n  {\n    searchString: 'Marfan Syndrome'\n  },\n  {\n    searchString: 'Spinocerebellar Ataxia 2',\n    category: 'disease'\n  },\n  {\n    searchString: 'Multicystic kidney dysplasia',\n    category: 'Phenotype'\n  },\n  {\n    searchString: 'Shh',\n    category: 'gene'\n  }\n];\nexport default {\n  name: 'AutoComplete',\n  filters: {\n    allLower(word) {\n      return word.toLowerCase();\n    }\n  },\n  props: {\n    showSearchButton: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    autoFocus: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    homeSearch: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    singleCategory: {\n      type: String,\n      required: false,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      destroying: false,\n      exampleSearches,\n      selected: 'Phenotype',\n      options: [\n        { text: 'Gene', value: 'gene' },\n        { text: 'Phenotype', value: 'Phenotype' },\n      ],\n      catDropDown: false,\n      value: '',\n      suggestions: [],\n      open: false,\n      current: -1,\n      loading: false\n    };\n  },\n  watch: {\n    value() {\n      if (!this.value) {\n        this.open = false;\n      }\n    },\n    selected(newValue) {\n      this.value = '';\n      this.fetchData();\n\n      }\n  },\n  beforeDestroy() {\n    this.destroying = true;\n  },\n  methods: {\n    debounceInput: debounce(\n      function debounceInput() {\n        if (!this.destroying) {\n          this.fetchData();\n        }\n      }, 500, { leading: false, trailing: true }\n    ),\n    async fetchData() {\n      try {\n        const selected = this.selected;\n        const searchResponse = await BL.getSearchTermSuggestions(this.value, selected);\n        this.suggestions = [];\n        this.current = -1;\n        searchResponse.docs.forEach((elem) => {\n          const resultPacket = {\n            match: elem.match,\n            category: this.categoryMap(elem.category),\n            taxon: this.checkTaxon(elem.taxon_label),\n            curie: elem.id,\n            highlight: elem.highlight,\n            has_hl: elem.has_highlight\n          };\n          this.suggestions.push(resultPacket);\n        });\n        this.open = true;\n        this.loading = false;\n      }\n      catch (e) {\n        console.log('nodeResponse ERROR', e, this);\n      }\n    },\n    enter() {\n      const currentData = this.suggestions[this.current];\n      if (currentData) {\n        currentData['selected'] = true;\n        console.log(currentData);\n        this.$emit('interface', currentData);\n      }\n      else {\n        this.showMore();\n      }\n      this.value = '';\n      this.open = false;\n      this.suggestions = [];\n    },\n    up() {\n      if (this.current > 0) {\n        this.current -= 1;\n      }\n    },\n    toggleFilterBox() {\n      this.catDropDown = !this.catDropDown;\n    },\n    inputChanged() {\n      this.catDropDown = false;\n    },\n    down() {\n      if (this.current < this.suggestions.length - 1) {\n        this.current += 1;\n      }\n    },\n    isActive(index) {\n      return index === this.current;\n    },\n    mouseOver(index) {\n      this.current = index;\n    },\n    suggestionClick(index) {\n      const currentData = this.suggestions[index];\n      currentData['selected'] = true;\n      this.$emit('interface', currentData);\n      this.value = '';\n      this.open = false;\n      this.suggestions = [];\n    },\n    showMore() {\n      this.$emit('interface',\n        { selected: false,\n          searchTerm: this.value,\n          category: 'Phenotype',\n      });\n    },\n    clearSearch() {\n      this.suggestions = [];\n      this.open = false;\n    },\n    categoryMap(catList) {\n      const validCats = {\n        'gene': 'gene',\n        'variant locus': 'variant',\n        'Phenotype': 'phenotype',\n        'genotype': 'genotype',\n        'disease': 'disease'\n      };\n      const categoryObj = catList.reduce((map, cat) => {\n        const catKey = validCats[cat];\n        if (catKey) {\n          map[catKey] = catKey;\n        }\n        return map;\n      }, {});\n      return categoryObj.gene\n        || categoryObj.variant\n        || Object.keys(categoryObj).join(',');\n    },\n    checkTaxon(taxon) {\n      if (typeof taxon === 'string') {\n        return taxon;\n      }\n      return null;\n    },\n    useExample(searchString, category) {\n      this.selected = [];\n      if (category) {\n        this.selected.push(category);\n      }\n      this.value = searchString;\n    }\n  },\n};\n</script>\n\n<style lang=\"scss\">\n@import \"~@/style/variables\";\n\n.monarch-autocomplete {\n  .text-align-right {\n    text-align: right;\n  }\n  .autocomplete-input {\n    position: relative;\n    height: 300px;\n  }\n  .loading {\n    background-color: #ffffff;\n    background-image: url(\"../assets/img/infinity.gif\");\n    background-size: 25px 25px;\n    background-position: 99%;\n    background-repeat: no-repeat;\n  }\n  .dropList {\n    width:100%;\n    border-radius: 2px;\n    border: solid black 1px;\n  }\n  .dropCatList {\n    position: absolute;\n    z-index: 1001;\n    border-radius: 2px;\n    padding-left: 2px;\n    padding-right: 2px;\n  }\n  li:hover {\n    background-color: cornflowerblue;\n    color: white;\n  }\n  .active {\n    background-color: cornflowerblue;\n    color: white;\n  }\n\n  div.form-group .btn.btn-dark.btn-sm.active {\n    border-color: ghostwhite;\n  }\n\n  .autorootdiv {\n    position: relative;\n  }\n\n  .hilite {\n    font-weight: bold;\n  }\n\n  .example-button{\n     background-color:  cadetblue;\n  }\n\n  .autorootdiv .input-group.input-group-sm {\n    width: 400px;\n  }\n\n  .autorootdiv.home-search .input-group.input-group-sm {\n    width: unset;\n  }\n}\n</style>\n"]}]}