{"remainingRequest":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/babel-loader/lib/index.js!/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/src/components/MonarchAutocomplete.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/src/components/MonarchAutocomplete.vue","mtime":1540927684884},{"path":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/cache-loader/dist/cjs.js","mtime":1539379416466},{"path":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/cache-loader/dist/cjs.js","mtime":1539379416466},{"path":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/@babel/runtime/helpers/builtin/es6/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport * as BL from '@/api/BioLink';\n\nvar debounce = require('lodash/debounce');\n\nvar exampleSearches = [{\n  searchString: 'Marfan Syndrome'\n}, {\n  searchString: 'Spinocerebellar Ataxia 2',\n  category: 'disease'\n}, {\n  searchString: 'Multicystic kidney dysplasia',\n  category: 'Phenotype'\n}, {\n  searchString: 'Shh',\n  category: 'gene'\n}];\nexport default {\n  name: 'AutoComplete',\n  filters: {\n    allLower: function allLower(word) {\n      return word.toLowerCase();\n    }\n  },\n  props: {\n    showSearchButton: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    autoFocus: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    homeSearch: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    singleCategory: {\n      type: String,\n      required: false,\n      default: ''\n    }\n  },\n  data: function data() {\n    return {\n      destroying: false,\n      exampleSearches: exampleSearches,\n      selected: 'Phenotype',\n      options: [{\n        text: 'Gene',\n        value: 'gene'\n      }, {\n        text: 'Phenotype',\n        value: 'Phenotype'\n      }],\n      catDropDown: false,\n      value: '',\n      suggestions: [],\n      open: false,\n      current: -1,\n      loading: false\n    };\n  },\n  watch: {\n    value: function value() {\n      if (!this.value) {\n        this.open = false;\n      }\n    },\n    selected: function selected(newValue) {\n      this.value = '';\n      this.fetchData();\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.destroying = true;\n  },\n  methods: {\n    debounceInput: debounce(function debounceInput() {\n      if (!this.destroying) {\n        this.fetchData();\n      }\n    }, 500, {\n      leading: false,\n      trailing: true\n    }),\n    fetchData: function () {\n      var _fetchData = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        var selected, searchResponse;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                selected = this.selected;\n                _context.next = 4;\n                return BL.getSearchTermSuggestions(this.value, selected);\n\n              case 4:\n                searchResponse = _context.sent;\n                this.suggestions = [];\n                this.current = -1;\n                searchResponse.docs.forEach(function (elem) {\n                  var resultPacket = {\n                    match: elem.match,\n                    category: _this.categoryMap(elem.category),\n                    taxon: _this.checkTaxon(elem.taxon_label),\n                    curie: elem.id,\n                    highlight: elem.highlight,\n                    has_hl: elem.has_highlight\n                  };\n\n                  _this.suggestions.push(resultPacket);\n                });\n                this.open = true;\n                this.loading = false;\n                _context.next = 15;\n                break;\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](0);\n                console.log('nodeResponse ERROR', _context.t0, this);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 12]]);\n      }));\n\n      return function fetchData() {\n        return _fetchData.apply(this, arguments);\n      };\n    }(),\n    enter: function enter() {\n      var currentData = this.suggestions[this.current];\n\n      if (currentData) {\n        currentData['selected'] = true;\n        currentData['searchTerm'] = this.value, this.$emit('interface', currentData);\n      } else {\n        this.showMore();\n      } // this.value = '';\n\n\n      this.open = false;\n      this.suggestions = [];\n    },\n    up: function up() {\n      if (this.current > 0) {\n        this.current -= 1;\n      }\n    },\n    toggleFilterBox: function toggleFilterBox() {\n      this.catDropDown = !this.catDropDown;\n    },\n    inputChanged: function inputChanged() {\n      this.catDropDown = false;\n    },\n    down: function down() {\n      if (this.current < this.suggestions.length - 1) {\n        this.current += 1;\n      }\n    },\n    isActive: function isActive(index) {\n      return index === this.current;\n    },\n    mouseOver: function mouseOver(index) {\n      this.current = index;\n    },\n    suggestionClick: function suggestionClick(index) {\n      var currentData = this.suggestions[index];\n      currentData['selected'] = true;\n      currentData['searchTerm'] = this.value, this.$emit('interface', currentData); // this.value = '';\n\n      this.open = false;\n      this.suggestions = [];\n    },\n    showMore: function showMore() {\n      this.$emit('interface', {\n        selected: false,\n        searchTerm: this.value,\n        category: 'Phenotype'\n      });\n    },\n    clearSearch: function clearSearch() {\n      this.suggestions = [];\n      this.open = false;\n    },\n    categoryMap: function categoryMap(catList) {\n      var validCats = {\n        'gene': 'gene',\n        'variant locus': 'variant',\n        'Phenotype': 'phenotype',\n        'genotype': 'genotype',\n        'disease': 'disease'\n      };\n      var categoryObj = catList.reduce(function (map, cat) {\n        var catKey = validCats[cat];\n\n        if (catKey) {\n          map[catKey] = catKey;\n        }\n\n        return map;\n      }, {});\n      return categoryObj.gene || categoryObj.variant || Object.keys(categoryObj).join(',');\n    },\n    checkTaxon: function checkTaxon(taxon) {\n      if (typeof taxon === 'string') {\n        return taxon;\n      }\n\n      return null;\n    },\n    useExample: function useExample(searchString, category) {\n      this.selected = [];\n\n      if (category) {\n        this.selected.push(category);\n      }\n\n      this.value = searchString;\n    }\n  }\n};",{"version":3,"sources":["MonarchAutocomplete.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0FA,OAAA,KAAA,EAAA,MAAA,eAAA;;AAEA,IAAA,WAAA,QAAA,iBAAA,CAAA;;AAEA,IAAA,kBAAA,CACA;AACA,gBAAA;AADA,CADA,EAIA;AACA,gBAAA,0BADA;AAEA,YAAA;AAFA,CAJA,EAQA;AACA,gBAAA,8BADA;AAEA,YAAA;AAFA,CARA,EAYA;AACA,gBAAA,KADA;AAEA,YAAA;AAFA,CAZA,CAAA;AAiBA,eAAA;AACA,QAAA,cADA;AAEA,WAAA;AACA,YADA,oBACA,IADA,EACA;AACA,aAAA,KAAA,WAAA,EAAA;AACA;AAHA,GAFA;AAOA,SAAA;AACA,sBAAA;AACA,YAAA,OADA;AAEA,gBAAA,KAFA;AAGA,eAAA;AAHA,KADA;AAMA,eAAA;AACA,YAAA,OADA;AAEA,gBAAA,KAFA;AAGA,eAAA;AAHA,KANA;AAWA,gBAAA;AACA,YAAA,OADA;AAEA,gBAAA,KAFA;AAGA,eAAA;AAHA,KAXA;AAgBA,oBAAA;AACA,YAAA,MADA;AAEA,gBAAA,KAFA;AAGA,eAAA;AAHA;AAhBA,GAPA;AA6BA,MA7BA,kBA6BA;AACA,WAAA;AACA,kBAAA,KADA;AAEA,sCAFA;AAGA,gBAAA,WAHA;AAIA,eAAA,CACA;AAAA,cAAA,MAAA;AAAA,eAAA;AAAA,OADA,EAEA;AAAA,cAAA,WAAA;AAAA,eAAA;AAAA,OAFA,CAJA;AAQA,mBAAA,KARA;AASA,aAAA,EATA;AAUA,mBAAA,EAVA;AAWA,YAAA,KAXA;AAYA,eAAA,CAAA,CAZA;AAaA,eAAA;AAbA,KAAA;AAeA,GA7CA;AA8CA,SAAA;AACA,SADA,mBACA;AACA,UAAA,CAAA,KAAA,KAAA,EAAA;AACA,aAAA,IAAA,GAAA,KAAA;AACA;AACA,KALA;AAMA,YANA,oBAMA,QANA,EAMA;AACA,WAAA,KAAA,GAAA,EAAA;AACA,WAAA,SAAA;AAEA;AAVA,GA9CA;AA0DA,eA1DA,2BA0DA;AACA,SAAA,UAAA,GAAA,IAAA;AACA,GA5DA;AA6DA,WAAA;AACA,mBAAA,SACA,SAAA,aAAA,GAAA;AACA,UAAA,CAAA,KAAA,UAAA,EAAA;AACA,aAAA,SAAA;AACA;AACA,KALA,EAKA,GALA,EAKA;AAAA,eAAA,KAAA;AAAA,gBAAA;AAAA,KALA,CADA;AAQA,aARA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA,wBAVA,GAUA,KAAA,QAVA;AAAA;AAAA,uBAWA,GAAA,wBAAA,CAAA,KAAA,KAAA,EAAA,QAAA,CAXA;;AAAA;AAWA,8BAXA;AAYA,qBAAA,WAAA,GAAA,EAAA;AACA,qBAAA,OAAA,GAAA,CAAA,CAAA;AACA,+BAAA,IAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA;AACA,sBAAA,eAAA;AACA,2BAAA,KAAA,KADA;AAEA,8BAAA,MAAA,WAAA,CAAA,KAAA,QAAA,CAFA;AAGA,2BAAA,MAAA,UAAA,CAAA,KAAA,WAAA,CAHA;AAIA,2BAAA,KAAA,EAJA;AAKA,+BAAA,KAAA,SALA;AAMA,4BAAA,KAAA;AANA,mBAAA;;AAQA,wBAAA,WAAA,CAAA,IAAA,CAAA,YAAA;AACA,iBAVA;AAWA,qBAAA,IAAA,GAAA,IAAA;AACA,qBAAA,OAAA,GAAA,KAAA;AA1BA;AAAA;;AAAA;AAAA;AAAA;AA6BA,wBAAA,GAAA,CAAA,oBAAA,eAAA,IAAA;;AA7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAgCA,SAhCA,mBAgCA;AACA,UAAA,cAAA,KAAA,WAAA,CAAA,KAAA,OAAA,CAAA;;AACA,UAAA,WAAA,EAAA;AACA,oBAAA,UAAA,IAAA,IAAA;AACA,oBAAA,YAAA,IAAA,KAAA,KAAA,EACA,KAAA,KAAA,CAAA,WAAA,EAAA,WAAA,CADA;AAEA,OAJA,MAKA;AACA,aAAA,QAAA;AACA,OATA,CAUA;;;AACA,WAAA,IAAA,GAAA,KAAA;AACA,WAAA,WAAA,GAAA,EAAA;AACA,KA7CA;AA8CA,MA9CA,gBA8CA;AACA,UAAA,KAAA,OAAA,GAAA,CAAA,EAAA;AACA,aAAA,OAAA,IAAA,CAAA;AACA;AACA,KAlDA;AAmDA,mBAnDA,6BAmDA;AACA,WAAA,WAAA,GAAA,CAAA,KAAA,WAAA;AACA,KArDA;AAsDA,gBAtDA,0BAsDA;AACA,WAAA,WAAA,GAAA,KAAA;AACA,KAxDA;AAyDA,QAzDA,kBAyDA;AACA,UAAA,KAAA,OAAA,GAAA,KAAA,WAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,aAAA,OAAA,IAAA,CAAA;AACA;AACA,KA7DA;AA8DA,YA9DA,oBA8DA,KA9DA,EA8DA;AACA,aAAA,UAAA,KAAA,OAAA;AACA,KAhEA;AAiEA,aAjEA,qBAiEA,KAjEA,EAiEA;AACA,WAAA,OAAA,GAAA,KAAA;AACA,KAnEA;AAoEA,mBApEA,2BAoEA,KApEA,EAoEA;AACA,UAAA,cAAA,KAAA,WAAA,CAAA,KAAA,CAAA;AACA,kBAAA,UAAA,IAAA,IAAA;AACA,kBAAA,YAAA,IAAA,KAAA,KAAA,EACA,KAAA,KAAA,CAAA,WAAA,EAAA,WAAA,CADA,CAHA,CAKA;;AACA,WAAA,IAAA,GAAA,KAAA;AACA,WAAA,WAAA,GAAA,EAAA;AACA,KA5EA;AA6EA,YA7EA,sBA6EA;AACA,WAAA,KAAA,CAAA,WAAA,EACA;AAAA,kBAAA,KAAA;AACA,oBAAA,KAAA,KADA;AAEA,kBAAA;AAFA,OADA;AAKA,KAnFA;AAoFA,eApFA,yBAoFA;AACA,WAAA,WAAA,GAAA,EAAA;AACA,WAAA,IAAA,GAAA,KAAA;AACA,KAvFA;AAwFA,eAxFA,uBAwFA,OAxFA,EAwFA;AACA,UAAA,YAAA;AACA,gBAAA,MADA;AAEA,yBAAA,SAFA;AAGA,qBAAA,WAHA;AAIA,oBAAA,UAJA;AAKA,mBAAA;AALA,OAAA;AAOA,UAAA,cAAA,QAAA,MAAA,CAAA,UAAA,GAAA,EAAA,GAAA,EAAA;AACA,YAAA,SAAA,UAAA,GAAA,CAAA;;AACA,YAAA,MAAA,EAAA;AACA,cAAA,MAAA,IAAA,MAAA;AACA;;AACA,eAAA,GAAA;AACA,OANA,EAMA,EANA,CAAA;AAOA,aAAA,YAAA,IAAA,IACA,YAAA,OADA,IAEA,OAAA,IAAA,CAAA,WAAA,EAAA,IAAA,CAAA,GAAA,CAFA;AAGA,KA1GA;AA2GA,cA3GA,sBA2GA,KA3GA,EA2GA;AACA,UAAA,OAAA,KAAA,KAAA,QAAA,EAAA;AACA,eAAA,KAAA;AACA;;AACA,aAAA,IAAA;AACA,KAhHA;AAiHA,cAjHA,sBAiHA,YAjHA,EAiHA,QAjHA,EAiHA;AACA,WAAA,QAAA,GAAA,EAAA;;AACA,UAAA,QAAA,EAAA;AACA,aAAA,QAAA,CAAA,IAAA,CAAA,QAAA;AACA;;AACA,WAAA,KAAA,GAAA,YAAA;AACA;AAvHA;AA7DA,CAAA","sourcesContent":["<template>\n  <div\n    :class=\"{\n      'home-search':homeSearch,\n      'open':open\n    }\"\n    class=\"monarch-autocomplete autocomplete autorootdiv\"\n  >\n    <div\n      :class=\"{'input-group-sm': !homeSearch}\"\n      class=\"input-group\"\n    >\n      <input\n        :class=\"{'loading': loading}\"\n        v-model=\"value\"\n        class=\"form-control xform-control-sm\"\n        type=\"text\"\n        autofocus=\"autoFocus\"\n        placeholder=\"Search for diseases and phenotypes ex: 'Heart disease' or ''\"\n        @input=\"debounceInput\"\n        @keydown=\"inputChanged\"\n        @keydown.enter=\"enter\"\n        @keydown.down=\"down\"\n        @keydown.up=\"up\"\n        @keydown.esc=\"clearSearch\"\n        @blur=\"clearSearch\"\n      >\n      <div\n        class=\"input-group-append\">\n        <button\n          v-b-tooltip.topright\n          class=\"btn xbtn-sm btn-outline-info py-0\"\n          type=\"button\"\n          title=\"Show all matching results\"\n          @click=\"showMore\"\n        >\n          search\n        </button>\n      </div>\n      <div\n        v-if=\"open\"\n        class=\"dropdown-menu list-group dropList px-4\"\n        style=\"overflow-y:auto;\"\n      >\n        <!--\n          @blur above hides @click. Use @mousedown instead\n          https://stackoverflow.com/a/50313781/5667222\n        -->\n        <div\n          v-for=\"(suggestion, index) in suggestions\"\n          :key=\"index\"\n          :class=\"{'active': isActive(index)}\"\n          class=\"border-bottom px-1\"\n          @mousedown=\"suggestionClick(index)\"\n          @mouseover=\"mouseOver(index)\"\n        >\n          <div class=\"row p-0\">\n            <div\n              v-if=\"suggestion.has_hl\"\n              class=\"col-5\"\n            >\n              <span v-html=\"suggestion.highlight\"/>\n            </div>\n            <div\n              v-else\n              class=\"col-5\"\n            >\n              <strong>{{ suggestion.match }}</strong>\n            </div>\n            <div class=\"col-4\"><i>{{ suggestion.taxon }}</i></div>\n            <div class=\"col-3 text-align-right\">\n              <small>{{ suggestion.category }}</small>\n            </div>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div\n            v-if=\"suggestions.length === 0\"\n            class=\"btn col m-2\"\n          >\n            No results for '{{ value }}'\n          </div>\n\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport * as BL from '@/api/BioLink';\n\nconst debounce = require('lodash/debounce');\n\nconst exampleSearches = [\n  {\n    searchString: 'Marfan Syndrome'\n  },\n  {\n    searchString: 'Spinocerebellar Ataxia 2',\n    category: 'disease'\n  },\n  {\n    searchString: 'Multicystic kidney dysplasia',\n    category: 'Phenotype'\n  },\n  {\n    searchString: 'Shh',\n    category: 'gene'\n  }\n];\nexport default {\n  name: 'AutoComplete',\n  filters: {\n    allLower(word) {\n      return word.toLowerCase();\n    }\n  },\n  props: {\n    showSearchButton: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    autoFocus: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    homeSearch: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    singleCategory: {\n      type: String,\n      required: false,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      destroying: false,\n      exampleSearches,\n      selected: 'Phenotype',\n      options: [\n        { text: 'Gene', value: 'gene' },\n        { text: 'Phenotype', value: 'Phenotype' },\n      ],\n      catDropDown: false,\n      value: '',\n      suggestions: [],\n      open: false,\n      current: -1,\n      loading: false\n    };\n  },\n  watch: {\n    value() {\n      if (!this.value) {\n        this.open = false;\n      }\n    },\n    selected(newValue) {\n      this.value = '';\n      this.fetchData();\n\n      }\n  },\n  beforeDestroy() {\n    this.destroying = true;\n  },\n  methods: {\n    debounceInput: debounce(\n      function debounceInput() {\n        if (!this.destroying) {\n          this.fetchData();\n        }\n      }, 500, { leading: false, trailing: true }\n    ),\n    async fetchData() {\n      try {\n        const selected = this.selected;\n        const searchResponse = await BL.getSearchTermSuggestions(this.value, selected);\n        this.suggestions = [];\n        this.current = -1;\n        searchResponse.docs.forEach((elem) => {\n          const resultPacket = {\n            match: elem.match,\n            category: this.categoryMap(elem.category),\n            taxon: this.checkTaxon(elem.taxon_label),\n            curie: elem.id,\n            highlight: elem.highlight,\n            has_hl: elem.has_highlight\n          };\n          this.suggestions.push(resultPacket);\n        });\n        this.open = true;\n        this.loading = false;\n      }\n      catch (e) {\n        console.log('nodeResponse ERROR', e, this);\n      }\n    },\n    enter() {\n      const currentData = this.suggestions[this.current];\n      if (currentData) {\n        currentData['selected'] = true;\n        currentData['searchTerm'] = this.value,\n        this.$emit('interface', currentData);\n      }\n      else {\n        this.showMore();\n      }\n      // this.value = '';\n      this.open = false;\n      this.suggestions = [];\n    },\n    up() {\n      if (this.current > 0) {\n        this.current -= 1;\n      }\n    },\n    toggleFilterBox() {\n      this.catDropDown = !this.catDropDown;\n    },\n    inputChanged() {\n      this.catDropDown = false;\n    },\n    down() {\n      if (this.current < this.suggestions.length - 1) {\n        this.current += 1;\n      }\n    },\n    isActive(index) {\n      return index === this.current;\n    },\n    mouseOver(index) {\n      this.current = index;\n    },\n    suggestionClick(index) {\n      const currentData = this.suggestions[index];\n      currentData['selected'] = true;\n      currentData['searchTerm'] = this.value,\n      this.$emit('interface', currentData);\n      // this.value = '';\n      this.open = false;\n      this.suggestions = [];\n    },\n    showMore() {\n      this.$emit('interface',\n        { selected: false,\n          searchTerm: this.value,\n          category: 'Phenotype',\n      });\n    },\n    clearSearch() {\n      this.suggestions = [];\n      this.open = false;\n    },\n    categoryMap(catList) {\n      const validCats = {\n        'gene': 'gene',\n        'variant locus': 'variant',\n        'Phenotype': 'phenotype',\n        'genotype': 'genotype',\n        'disease': 'disease'\n      };\n      const categoryObj = catList.reduce((map, cat) => {\n        const catKey = validCats[cat];\n        if (catKey) {\n          map[catKey] = catKey;\n        }\n        return map;\n      }, {});\n      return categoryObj.gene\n        || categoryObj.variant\n        || Object.keys(categoryObj).join(',');\n    },\n    checkTaxon(taxon) {\n      if (typeof taxon === 'string') {\n        return taxon;\n      }\n      return null;\n    },\n    useExample(searchString, category) {\n      this.selected = [];\n      if (category) {\n        this.selected.push(category);\n      }\n      this.value = searchString;\n    }\n  },\n};\n</script>\n\n<style lang=\"scss\">\n@import \"~@/style/variables\";\n\n.monarch-autocomplete {\n  .text-align-right {\n    text-align: right;\n  }\n  .autocomplete-input {\n    position: relative;\n    height: 300px;\n  }\n  .loading {\n    background-color: #ffffff;\n    background-image: url(\"../assets/img/infinity.gif\");\n    background-size: 25px 25px;\n    background-position: 99%;\n    background-repeat: no-repeat;\n  }\n  .dropList {\n    width:100%;\n    border-radius: 2px;\n    border: solid black 1px;\n  }\n  .dropCatList {\n    position: absolute;\n    z-index: 1001;\n    border-radius: 2px;\n    padding-left: 2px;\n    padding-right: 2px;\n  }\n  li:hover {\n    background-color: cornflowerblue;\n    color: white;\n  }\n  .active {\n    background-color: cornflowerblue;\n    color: white;\n  }\n\n  div.form-group .btn.btn-dark.btn-sm.active {\n    border-color: ghostwhite;\n  }\n\n  .autorootdiv {\n    position: relative;\n  }\n\n  .hilite {\n    font-weight: bold;\n  }\n\n  .example-button{\n     background-color:  cadetblue;\n  }\n\n  .autorootdiv .input-group.input-group-sm {\n    width: 400px;\n  }\n\n  .autorootdiv.home-search .input-group.input-group-sm {\n    width: unset;\n  }\n}\n</style>\n"],"sourceRoot":"src/components"}]}