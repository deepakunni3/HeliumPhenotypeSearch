{"remainingRequest":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/babel-loader/lib/index.js!/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/src/components/ResultsTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/src/components/ResultsTable.vue","mtime":1539654549737},{"path":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/cache-loader/dist/cjs.js","mtime":1539379416466},{"path":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/cache-loader/dist/cjs.js","mtime":1539379416466},{"path":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/@babel/runtime/helpers/builtin/es6/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport * as BL from '@/api/BioLink';\nexport default {\n  name: 'ResultTable',\n  props: {\n    value: {\n      type: Object,\n      required: true\n    }\n  },\n  computed: {\n    searchTerm: function searchTerm() {\n      return this.value.searchTerm;\n    },\n    searchCategory: function searchCategory() {\n      return this.value.category;\n    }\n  },\n  data: function data() {\n    return {\n      currentPage: 1,\n      fields: ['index', 'match', 'category', 'curie'],\n      items: []\n    };\n  },\n  mounted: function mounted() {\n    this.fetchData();\n  },\n  methods: {\n    fetchData: function () {\n      var _fetchData = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        var selected, searchResponse;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                selected = this.searchCategory;\n                _context.next = 4;\n                return BL.getSearchTermSuggestions(this.searchTerm, selected, 500);\n\n              case 4:\n                searchResponse = _context.sent;\n                this.items = [];\n                this.current = -1;\n                searchResponse.docs.forEach(function (elem) {\n                  var resultPacket = {\n                    match: elem.match,\n                    category: _this.categoryMap(elem.category),\n                    taxon: _this.checkTaxon(elem.taxon_label),\n                    curie: elem.id,\n                    highlight: elem.highlight,\n                    has_hl: elem.has_highlight\n                  };\n\n                  _this.items.push(resultPacket);\n                });\n                this.open = true;\n                this.loading = false;\n                _context.next = 15;\n                break;\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](0);\n                console.log('nodeResponse ERROR', _context.t0, this);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 12]]);\n      }));\n\n      return function fetchData() {\n        return _fetchData.apply(this, arguments);\n      };\n    }(),\n    categoryMap: function categoryMap(catList) {\n      var validCats = {\n        'gene': 'gene',\n        'variant locus': 'variant',\n        'Phenotype': 'phenotype',\n        'genotype': 'genotype',\n        'disease': 'disease'\n      };\n      var categoryObj = catList.reduce(function (map, cat) {\n        var catKey = validCats[cat];\n\n        if (catKey) {\n          map[catKey] = catKey;\n        }\n\n        return map;\n      }, {});\n      return categoryObj.gene || categoryObj.variant || Object.keys(categoryObj).join(',');\n    },\n    checkTaxon: function checkTaxon(taxon) {\n      if (typeof taxon === 'string') {\n        return taxon;\n      }\n\n      return null;\n    },\n    emitSelection: function emitSelection(row) {\n      this.$emit('resultInterface', row);\n    }\n  }\n};",{"version":3,"sources":["ResultsTable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA,OAAA,KAAA,EAAA,MAAA,eAAA;AAEA,eAAA;AACA,QAAA,aADA;AAEA,SAAA;AACA,WAAA;AACA,YAAA,MADA;AAEA,gBAAA;AAFA;AADA,GAFA;AAQA,YAAA;AACA,cADA,wBACA;AACA,aAAA,KAAA,KAAA,CAAA,UAAA;AACA,KAHA;AAIA,kBAJA,4BAIA;AACA,aAAA,KAAA,KAAA,CAAA,QAAA;AACA;AANA,GARA;AAgBA,MAhBA,kBAgBA;AACA,WAAA;AACA,mBAAA,CADA;AAEA,cAAA,CAAA,OAAA,EAAA,OAAA,EAAA,UAAA,EAAA,OAAA,CAFA;AAGA,aAAA;AAHA,KAAA;AAKA,GAtBA;AAuBA,SAvBA,qBAuBA;AACA,SAAA,SAAA;AACA,GAzBA;AA0BA,WAAA;AACA,aADA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,wBAHA,GAGA,KAAA,cAHA;AAAA;AAAA,uBAIA,GAAA,wBAAA,CAAA,KAAA,UAAA,EAAA,QAAA,EAAA,GAAA,CAJA;;AAAA;AAIA,8BAJA;AAKA,qBAAA,KAAA,GAAA,EAAA;AACA,qBAAA,OAAA,GAAA,CAAA,CAAA;AACA,+BAAA,IAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA;AACA,sBAAA,eAAA;AACA,2BAAA,KAAA,KADA;AAEA,8BAAA,MAAA,WAAA,CAAA,KAAA,QAAA,CAFA;AAGA,2BAAA,MAAA,UAAA,CAAA,KAAA,WAAA,CAHA;AAIA,2BAAA,KAAA,EAJA;AAKA,+BAAA,KAAA,SALA;AAMA,4BAAA,KAAA;AANA,mBAAA;;AAQA,wBAAA,KAAA,CAAA,IAAA,CAAA,YAAA;AACA,iBAVA;AAWA,qBAAA,IAAA,GAAA,IAAA;AACA,qBAAA,OAAA,GAAA,KAAA;AAnBA;AAAA;;AAAA;AAAA;AAAA;AAsBA,wBAAA,GAAA,CAAA,oBAAA,eAAA,IAAA;;AAtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAyBA,eAzBA,uBAyBA,OAzBA,EAyBA;AACA,UAAA,YAAA;AACA,gBAAA,MADA;AAEA,yBAAA,SAFA;AAGA,qBAAA,WAHA;AAIA,oBAAA,UAJA;AAKA,mBAAA;AALA,OAAA;AAOA,UAAA,cAAA,QAAA,MAAA,CAAA,UAAA,GAAA,EAAA,GAAA,EAAA;AACA,YAAA,SAAA,UAAA,GAAA,CAAA;;AACA,YAAA,MAAA,EAAA;AACA,cAAA,MAAA,IAAA,MAAA;AACA;;AACA,eAAA,GAAA;AACA,OANA,EAMA,EANA,CAAA;AAOA,aAAA,YAAA,IAAA,IACA,YAAA,OADA,IAEA,OAAA,IAAA,CAAA,WAAA,EAAA,IAAA,CAAA,GAAA,CAFA;AAGA,KA3CA;AA4CA,cA5CA,sBA4CA,KA5CA,EA4CA;AACA,UAAA,OAAA,KAAA,KAAA,QAAA,EAAA;AACA,eAAA,KAAA;AACA;;AACA,aAAA,IAAA;AACA,KAjDA;AAkDA,iBAlDA,yBAkDA,GAlDA,EAkDA;AACA,WAAA,KAAA,CAAA,iBAAA,EAAA,GAAA;AACA;AApDA;AA1BA,CAAA","sourcesContent":["<template>\n  <div class=\"py-2\">\n    {{items.length}} total terms found\n    <b-table\n        small\n        striped\n        hover\n        bordered\n        :per-page=10\n        :current-page=\"currentPage\"\n        :items=\"items\"\n        :fields=\"fields\"\n        @row-clicked=\"emitSelection\"\n    >\n      <!-- A virtual column -->\n      <template slot=\"index\" slot-scope=\"data\">\n        {{data.index + 1}}\n      </template>\n      <!-- A custom formatted column -->\n      <template slot=\"data\" slot-scope=\"data\">\n        {{data.value.match}}\n      </template>\n      <!-- A virtual composite column -->\n      <template slot=\"data\" slot-scope=\"data\">\n        {{data.value.category}}\n      </template>\n      <template slot=\"data\" slot-scope=\"data\">\n        {{data.value.curie}}\n      </template>\n    </b-table>\n    <b-pagination\n        align=\"center\"\n        size=\"md\"\n        :total-rows=\"items.length\"\n        v-model=\"currentPage\"\n        :per-page=\"10\">\n    </b-pagination>\n  </div>\n</template>\n<script>\n  import * as BL from '@/api/BioLink';\n\n  export default {\n    name: 'ResultTable',\n    props: {\n      value: {\n        type: Object,\n        required: true,\n      }\n    },\n    computed : {\n      searchTerm () {\n        return this.value.searchTerm;\n      },\n      searchCategory () {\n        return this.value.category;\n      },\n    },\n    data() {\n      return {\n        currentPage: 1,\n        fields: ['index', 'match', 'category', 'curie',],\n        items: []\n      };\n    },\n    mounted() {\n      this.fetchData();\n    },\n    methods: {\n      async fetchData() {\n        try {\n          const selected = this.searchCategory;\n          const searchResponse = await BL.getSearchTermSuggestions(this.searchTerm, selected, 500);\n          this.items = [];\n          this.current = -1;\n          searchResponse.docs.forEach((elem) => {\n            const resultPacket = {\n              match: elem.match,\n              category: this.categoryMap(elem.category),\n              taxon: this.checkTaxon(elem.taxon_label),\n              curie: elem.id,\n              highlight: elem.highlight,\n              has_hl: elem.has_highlight\n            };\n            this.items.push(resultPacket);\n          });\n          this.open = true;\n          this.loading = false;\n        }\n        catch (e) {\n          console.log('nodeResponse ERROR', e, this);\n        }\n      },\n      categoryMap(catList) {\n        const validCats = {\n          'gene': 'gene',\n          'variant locus': 'variant',\n          'Phenotype': 'phenotype',\n          'genotype': 'genotype',\n          'disease': 'disease'\n        };\n        const categoryObj = catList.reduce((map, cat) => {\n          const catKey = validCats[cat];\n          if (catKey) {\n            map[catKey] = catKey;\n          }\n          return map;\n        }, {});\n        return categoryObj.gene\n          || categoryObj.variant\n          || Object.keys(categoryObj).join(',');\n      },\n      checkTaxon(taxon) {\n        if (typeof taxon === 'string') {\n          return taxon;\n        }\n        return null;\n      },\n      emitSelection(row) {\n        this.$emit('resultInterface', row);\n      },\n    },\n  };\n</script>\n<style></style>\n"],"sourceRoot":"src/components"}]}