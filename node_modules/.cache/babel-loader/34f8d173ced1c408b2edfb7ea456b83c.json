{"remainingRequest":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/babel-loader/lib/index.js!/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/src/api/BioLink.js","dependencies":[{"path":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/src/api/BioLink.js","mtime":1540482212684},{"path":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/cache-loader/dist/cjs.js","mtime":1539379416466},{"path":"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"regenerator-runtime/runtime\";\nimport _typeof from \"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/@babel/runtime/helpers/builtin/es6/typeof\";\nimport \"core-js/modules/es6.string.sub\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _asyncToGenerator from \"/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/node_modules/@babel/runtime/helpers/builtin/es6/asyncToGenerator\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es7.promise.finally\";\nimport axios from 'axios';\nvar servers = {\n  development: {\n    'type': 'development',\n    'app_base': 'https://beta.monarchinitiative.org',\n    'scigraph_url': 'https://scigraph-ontology-dev.monarchinitiative.org/scigraph/',\n    'scigraph_data_url': 'https://scigraph-data-dev.monarchinitiative.org/scigraph/',\n    'golr_url': 'https://solr.monarchinitiative.org/solr/golr/',\n    'search_url': 'https://solr.monarchinitiative.org/solr/search/',\n    'owlsim_services_url': 'https://beta.monarchinitiative.org/owlsim',\n    'analytics_id': '',\n    // 'biolink_url': 'https://api-dev.monarchinitiative.org/api/',\n    'biolink_url': 'https://api.monarchinitiative.org/api/'\n  },\n  beta: {\n    'type': 'beta',\n    'app_base': 'https://beta.monarchinitiative.org',\n    'scigraph_url': 'https://scigraph-ontology-dev.monarchinitiative.org/scigraph/',\n    'scigraph_data_url': 'https://scigraph-data-dev.monarchinitiative.org/scigraph/',\n    'golr_url': 'https://solr.monarchinitiative.org/solr/golr/',\n    'search_url': 'https://solr.monarchinitiative.org/solr/search/',\n    'owlsim_services_url': 'https://beta.monarchinitiative.org/owlsim',\n    'analytics_id': '',\n    'biolink_url': 'https://api-dev.monarchinitiative.org/api/'\n  },\n  cgrb: {\n    'type': 'beta',\n    'app_base': 'https://monarch-app-beta.cgrb.oregonstate.edu',\n    'scigraph_url': 'https://monarch-scigraph-ontology-dev.cgrb.oregonstate.edu/scigraph/',\n    'scigraph_data_url': 'https://monarch-scigraph-data-dev.cgrb.oregonstate.edu/scigraph/',\n    'golr_url': 'https://monarch-solr6-dev.cgrb.oregonstate.edu/solr/golr/',\n    'search_url': 'https://monarch-solr6-dev.cgrb.oregonstate.edu/solr/search/',\n    'owlsim_services_url': 'https://monarch-app-beta.cgrb.oregonstate.edu/owlsim',\n    'analytics_id': '',\n    'biolink_url': 'https://api-dev.monarchinitiative.org/api/'\n  }\n};\nvar serverConfiguration = servers.development;\nvar biolink = serverConfiguration.biolink_url;\n\nfunction getBiolinkAnnotation(cardType) {\n  var result = \"\".concat(cardType, \"s\");\n\n  if (cardType === 'anatomy') {\n    result = 'expression/anatomy';\n  } else if (cardType === 'literature') {\n    result = cardType;\n  } else if (cardType === 'function') {\n    result = cardType;\n  }\n\n  return result;\n} // TIP: Example of a domain-specific (as opposed to a generic loadJSON)\n// service function. This set of domain-specific services will pretty much\n// correspond to the set of needed services for the Monarch UI application, and may\n// not necessarily be the same set of functions needed by a generic client\n// of Monarch's services/data. In other words, we can add convenience/aggregation\n// services here that may not make sense for general-purpose use. Our goal\n// with this BioLink API module is to isolate the UI from the service layer, and only secondarily,\n// to create a general-purpose service layer, which is more what BioLink promises\n// to be.\n//\n\n\nvar nodeAssociationTypes = {\n  anatomy: ['gene'],\n  disease: ['gene', 'phenotype', 'model', 'variant', 'genotype', 'literature'],\n  function: ['gene'],\n  gene: ['disease', 'phenotype', 'model', 'variant', 'genotype', 'literature'],\n  genotype: ['disease', 'gene', 'phenotype', 'model', 'variant', 'literature'],\n  homolog: ['gene'],\n  interaction: ['gene'],\n  literature: ['disease'],\n  model: ['disease', 'gene', 'genotype', 'phenotype', 'variant', 'literature'],\n  orthoPhenotype: ['gene'],\n  orthoDisease: ['gene'],\n  pathway: ['disease', 'gene'],\n  phenotype: ['disease', 'gene', 'genotype', 'variant', 'literature'],\n  variant: ['disease', 'gene', 'phenotype', 'model', 'genotype', 'literature']\n};\nexport function getCounts(_x, _x2, _x3) {\n  return _getCounts.apply(this, arguments);\n}\n\nfunction _getCounts() {\n  _getCounts = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(nodeId, nodeType, countType) {\n    var bioentityUrl, bioentityParams, bioentityResp, bioentityResponseData;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (countType !== 'literature') {\n              countType += 's';\n            }\n\n            bioentityUrl = \"\".concat(biolink, \"bioentity/\").concat(nodeType, \"/\").concat(nodeId, \"/\").concat(countType); // console.log('getCounts', nodeId, nodeType, countType);\n\n            bioentityParams = {\n              fetch_objects: false,\n              unselect_evidence: true,\n              exclude_automatic_assertions: false,\n              use_compact_associations: true,\n              rows: 1\n            };\n            _context.next = 5;\n            return axios.get(bioentityUrl, {\n              params: bioentityParams\n            });\n\n          case 5:\n            bioentityResp = _context.sent;\n            bioentityResponseData = bioentityResp.data; // console.log(bioentityResp.request.responseURL);\n            // console.log(bioentityResponseData);\n\n            return _context.abrupt(\"return\", bioentityResponseData);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _getCounts.apply(this, arguments);\n}\n\nfunction getCountsForNode(_x4, _x5) {\n  return _getCountsForNode.apply(this, arguments);\n}\n\nfunction _getCountsForNode() {\n  _getCountsForNode = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee2(nodeId, nodeType) {\n    var associationTypes, promisesArray, associationsResult, associationsResultMap;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            associationTypes = nodeAssociationTypes[nodeType];\n\n            if (!associationTypes) {\n              _context2.next = 9;\n              break;\n            }\n\n            promisesArray = associationTypes.map(function (a) {\n              var countPromise = getCounts(nodeId, nodeType, a);\n              return countPromise;\n            });\n            _context2.next = 5;\n            return Promise.all(promisesArray);\n\n          case 5:\n            associationsResult = _context2.sent;\n            associationsResultMap = {};\n            associationTypes.forEach(function (a, index) {\n              var aResult = associationsResult[index].numFound;\n              associationsResultMap[a] = {\n                facetCount: aResult,\n                totalCount: aResult\n              };\n            });\n            return _context2.abrupt(\"return\", associationsResultMap);\n\n          case 9:\n            console.log('getCountsForNode', nodeId, nodeType, 'NO ASSOCIATIONS KNOWN');\n            return _context2.abrupt(\"return\", null);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n  return _getCountsForNode.apply(this, arguments);\n}\n\nexport function getNodeSummary(_x6, _x7) {\n  return _getNodeSummary.apply(this, arguments);\n}\n\nfunction _getNodeSummary() {\n  _getNodeSummary = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee3(nodeId, nodeType) {\n    var bioentityUrl, bioentityParams, bioentityResp, bioentityResponseData, graphUrl, graphResponse, graphResponseData, countsMap;\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            bioentityUrl = \"\".concat(biolink, \"bioentity/\").concat(nodeType, \"/\").concat(nodeId); // console.log('getNodeSummary bioentityUrl', nodeId, nodeType, bioentityUrl);\n\n            bioentityParams = {\n              fetch_objects: true,\n              unselect_evidence: false,\n              exclude_automatic_assertions: false,\n              use_compact_associations: false,\n              rows: 100\n            };\n            _context3.next = 4;\n            return axios.get(bioentityUrl, {\n              params: bioentityParams\n            });\n\n          case 4:\n            bioentityResp = _context3.sent;\n            bioentityResponseData = bioentityResp.data;\n\n            if (!bioentityResponseData.xrefs) {\n              bioentityResponseData.xrefs = [{\n                'url': '',\n                'label': 'BioLink:FIXME/xrefs',\n                'blank': false\n              }];\n            }\n\n            graphUrl = \"\".concat(biolink, \"graph/node/\").concat(nodeId);\n            _context3.next = 10;\n            return axios.get(graphUrl);\n\n          case 10:\n            graphResponse = _context3.sent;\n            // console.log('getNodeSummary graphUrl', nodeId, nodeType, graphUrl);\n            graphResponseData = graphResponse.data; // console.log(graphResponseData);\n\n            bioentityResponseData.edges = graphResponseData.edges;\n            bioentityResponseData.nodes = graphResponseData.nodes; // console.log(bioentityResponseData.edges);\n            // console.log(bioentityResponseData.nodes);\n            // const assUrl = `${biolink}bioentity/${nodeId}/associations`;\n\n            _context3.next = 16;\n            return getCountsForNode(nodeId, nodeType);\n\n          case 16:\n            countsMap = _context3.sent;\n            bioentityResponseData.counts = countsMap;\n            return _context3.abrupt(\"return\", bioentityResponseData);\n\n          case 19:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this);\n  }));\n  return _getNodeSummary.apply(this, arguments);\n}\n\nexport function getNeighborhoodFromResponse(response) {\n  var nodeId = response.id;\n  var nodeLabelMap = {};\n  var equivalentClasses = [];\n  var superclasses = [];\n  var subclasses = [];\n\n  if (response.nodes) {\n    response.nodes.forEach(function (node) {\n      nodeLabelMap[node.id] = node.lbl;\n    });\n  }\n\n  if (response.edges) {\n    response.edges.forEach(function (edge) {\n      if (edge.pred === 'subClassOf') {\n        if (edge.sub === nodeId) {\n          // console.log('Superclass Edge', edge.sub, edge.pred, edge.obj);\n          superclasses.push(edge.obj);\n        } else if (edge.obj === nodeId) {\n          // console.log('Subclass Edge', edge.sub, edge.pred, edge.obj);\n          subclasses.push(edge.sub);\n        } else {// console.log('BAD', edge.sub, edge.pred, edge.obj);\n        }\n      } else if (edge.pred === 'equivalentClass') {\n        // console.log('Equiv Edge', edge.sub, edge.pred, edge.obj);\n        if (edge.sub === nodeId) {// console.log('Skip duplicate equiv class', nodeId, edge.sub, edge.obj);\n        } else {\n          equivalentClasses.push(edge.sub);\n        }\n      }\n    });\n  }\n\n  return {\n    nodeLabelMap: nodeLabelMap,\n    equivalentClasses: equivalentClasses,\n    superclasses: superclasses,\n    subclasses: subclasses\n  };\n}\nexport function getSearchResults(_x8, _x9, _x10) {\n  return _getSearchResults.apply(this, arguments);\n}\n\nfunction _getSearchResults() {\n  _getSearchResults = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee4(query, start, rows) {\n    var bioentityUrl, bioentityParams, bioentityResp, bioentityResponseData;\n    return regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            bioentityUrl = \"\".concat(biolink, \"search/entity/\").concat(query);\n            bioentityParams = {\n              fetch_objects: false,\n              unselect_evidence: true,\n              exclude_automatic_assertions: false,\n              use_compact_associations: true,\n              rows: rows,\n              start: start\n            };\n            _context4.next = 4;\n            return axios.get(bioentityUrl, {\n              params: bioentityParams\n            });\n\n          case 4:\n            bioentityResp = _context4.sent;\n            bioentityResponseData = bioentityResp.data;\n            return _context4.abrupt(\"return\", bioentityResponseData);\n\n          case 7:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, this);\n  }));\n  return _getSearchResults.apply(this, arguments);\n}\n\nexport function getSearchTermSuggestions(_x11, _x12) {\n  return _getSearchTermSuggestions.apply(this, arguments);\n}\n\nfunction _getSearchTermSuggestions() {\n  _getSearchTermSuggestions = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee5(term, selected) {\n    var numRows,\n        baseUrl,\n        urlExtension,\n        params,\n        returnedPromise,\n        _args5 = arguments;\n    return regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            numRows = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : '10';\n            baseUrl = \"\".concat(biolink, \"search/entity/autocomplete/\");\n            urlExtension = \"\".concat(baseUrl).concat(term);\n            params = new URLSearchParams();\n            params.append('rows', numRows);\n            params.append('start', 0);\n            params.append('highlight_class', 'hilite');\n            params.append('boost_q', 'category:genotype^-10');\n\n            if (selected.toString() === 'gene') {\n              params.append('boost_fx', 'pow(edges,0.334)');\n              params.append('prefix', 'NCBIGene');\n            }\n\n            if (selected.toString() === 'Phenotype') {\n              params.append('prefix', 'HP');\n              params.append('prefix', 'MONDO');\n            }\n\n            params.append('prefix', '-OMIA');\n            returnedPromise = new Promise(function (resolve, reject) {\n              axios.get(urlExtension, {\n                params: params\n              }).then(function (resp) {\n                var responseData = resp.data;\n\n                if (_typeof(responseData) !== 'object') {\n                  reject(responseData);\n                } else {\n                  resolve(responseData);\n                }\n              }).catch(function (err) {\n                reject(err);\n              });\n            });\n            return _context5.abrupt(\"return\", returnedPromise);\n\n          case 13:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, this);\n  }));\n  return _getSearchTermSuggestions.apply(this, arguments);\n}\n\nexport function getNodeAssociations(nodeType, identifier, cardType, params) {\n  var baseUrl = \"\".concat(biolink, \"bioentity/\");\n  var biolinkAnnotationSuffix = getBiolinkAnnotation(cardType);\n  var urlExtension = \"\".concat(nodeType, \"/\").concat(identifier, \"/\").concat(biolinkAnnotationSuffix);\n  var url = \"\".concat(baseUrl).concat(urlExtension);\n  var returnedPromise = new Promise(function (resolve, reject) {\n    axios.get(url, {\n      params: params\n    }).then(function (resp) {\n      var responseData = resp;\n\n      if (_typeof(responseData) !== 'object') {\n        reject(responseData);\n      } else {\n        resolve(responseData);\n      }\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n  return returnedPromise;\n}\nexport function getNodeLabelByCurie(curie) {\n  var baseUrl = \"\".concat(biolink, \"bioentity/\").concat(curie);\n  var params = {\n    fetch_objects: true,\n    rows: 100\n  };\n  var returnedPromise = new Promise(function (resolve, reject) {\n    axios.get(baseUrl, {\n      params: params\n    }).then(function (resp) {\n      var responseData = resp;\n\n      if (_typeof(responseData) !== 'object') {\n        reject(responseData);\n      } else {\n        resolve(responseData);\n      }\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n  return returnedPromise;\n}\nexport function comparePhenotypes(phenotypesList, geneList) {\n  var species = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'all';\n  var mode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'search';\n  var baseUrl = 'https://beta.monarchinitiative.org/analyze/phenotypes.json?';\n  var params = new URLSearchParams();\n  var phenoCuries = phenotypesList.map(function (elem) {\n    return elem.curie;\n  });\n  params.append('input_items', phenoCuries);\n  params.append('gene_items', geneList);\n  params.append('target_species', species);\n  params.append('mode', mode);\n  var returnedPromise = new Promise(function (resolve, reject) {\n    axios.get(baseUrl, {\n      params: params\n    }).then(function (resp) {\n      var responseData = resp;\n\n      if (_typeof(responseData) !== 'object') {\n        reject(responseData);\n      } else {\n        resolve(responseData);\n      }\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n  return returnedPromise;\n}\nexport function debugServerName() {\n  return serverConfiguration.app_base.length > 0 ? serverConfiguration.app_base : 'https://beta.monarchinitiative.org';\n}",{"version":3,"sources":["/Users/tputman/CODE/dc_geno_pheno/dc_geno_pheno/src/api/BioLink.js"],"names":["axios","servers","development","beta","cgrb","serverConfiguration","biolink","biolink_url","getBiolinkAnnotation","cardType","result","nodeAssociationTypes","anatomy","disease","function","gene","genotype","homolog","interaction","literature","model","orthoPhenotype","orthoDisease","pathway","phenotype","variant","getCounts","nodeId","nodeType","countType","bioentityUrl","bioentityParams","fetch_objects","unselect_evidence","exclude_automatic_assertions","use_compact_associations","rows","get","params","bioentityResp","bioentityResponseData","data","getCountsForNode","associationTypes","promisesArray","map","a","countPromise","Promise","all","associationsResult","associationsResultMap","forEach","index","aResult","numFound","facetCount","totalCount","console","log","getNodeSummary","xrefs","graphUrl","graphResponse","graphResponseData","edges","nodes","countsMap","counts","getNeighborhoodFromResponse","response","id","nodeLabelMap","equivalentClasses","superclasses","subclasses","node","lbl","edge","pred","sub","push","obj","getSearchResults","query","start","getSearchTermSuggestions","term","selected","numRows","baseUrl","urlExtension","URLSearchParams","append","toString","returnedPromise","resolve","reject","then","resp","responseData","catch","err","getNodeAssociations","identifier","biolinkAnnotationSuffix","url","getNodeLabelByCurie","curie","comparePhenotypes","phenotypesList","geneList","species","mode","phenoCuries","elem","debugServerName","app_base","length"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nconst servers = {\n  development: {\n    'type': 'development',\n    'app_base': 'https://beta.monarchinitiative.org',\n    'scigraph_url': 'https://scigraph-ontology-dev.monarchinitiative.org/scigraph/',\n    'scigraph_data_url': 'https://scigraph-data-dev.monarchinitiative.org/scigraph/',\n    'golr_url': 'https://solr.monarchinitiative.org/solr/golr/',\n    'search_url': 'https://solr.monarchinitiative.org/solr/search/',\n    'owlsim_services_url': 'https://beta.monarchinitiative.org/owlsim',\n    'analytics_id': '',\n    // 'biolink_url': 'https://api-dev.monarchinitiative.org/api/',\n    'biolink_url': 'https://api.monarchinitiative.org/api/',\n  },\n\n  beta: {\n    'type': 'beta',\n    'app_base': 'https://beta.monarchinitiative.org',\n    'scigraph_url': 'https://scigraph-ontology-dev.monarchinitiative.org/scigraph/',\n    'scigraph_data_url': 'https://scigraph-data-dev.monarchinitiative.org/scigraph/',\n    'golr_url': 'https://solr.monarchinitiative.org/solr/golr/',\n    'search_url': 'https://solr.monarchinitiative.org/solr/search/',\n    'owlsim_services_url': 'https://beta.monarchinitiative.org/owlsim',\n    'analytics_id': '',\n    'biolink_url': 'https://api-dev.monarchinitiative.org/api/'\n  },\n\n  cgrb: {\n    'type': 'beta',\n    'app_base': 'https://monarch-app-beta.cgrb.oregonstate.edu',\n    'scigraph_url': 'https://monarch-scigraph-ontology-dev.cgrb.oregonstate.edu/scigraph/',\n    'scigraph_data_url': 'https://monarch-scigraph-data-dev.cgrb.oregonstate.edu/scigraph/',\n    'golr_url': 'https://monarch-solr6-dev.cgrb.oregonstate.edu/solr/golr/',\n    'search_url': 'https://monarch-solr6-dev.cgrb.oregonstate.edu/solr/search/',\n    'owlsim_services_url': 'https://monarch-app-beta.cgrb.oregonstate.edu/owlsim',\n    'analytics_id': '',\n    'biolink_url': 'https://api-dev.monarchinitiative.org/api/'\n  }\n};\n\n\nconst serverConfiguration = servers.development;\nconst biolink = serverConfiguration.biolink_url;\n\nfunction getBiolinkAnnotation(cardType) {\n  let result = `${cardType}s`;\n  if (cardType === 'anatomy') {\n    result = 'expression/anatomy';\n  }\n  else if (cardType === 'literature') {\n    result = cardType;\n  }\n  else if (cardType === 'function') {\n    result = cardType;\n  }\n\n  return result;\n}\n\n// TIP: Example of a domain-specific (as opposed to a generic loadJSON)\n// service function. This set of domain-specific services will pretty much\n// correspond to the set of needed services for the Monarch UI application, and may\n// not necessarily be the same set of functions needed by a generic client\n// of Monarch's services/data. In other words, we can add convenience/aggregation\n// services here that may not make sense for general-purpose use. Our goal\n// with this BioLink API module is to isolate the UI from the service layer, and only secondarily,\n// to create a general-purpose service layer, which is more what BioLink promises\n// to be.\n//\n\nconst nodeAssociationTypes = {\n  anatomy: [\n    'gene'\n  ],\n\n  disease: [\n    'gene',\n    'phenotype',\n    'model',\n    'variant',\n    'genotype',\n    'literature'\n  ],\n\n  function: [\n    'gene'\n  ],\n\n  gene: [\n    'disease',\n    'phenotype',\n    'model',\n    'variant',\n    'genotype',\n    'literature'\n  ],\n\n  genotype: [\n    'disease',\n    'gene',\n    'phenotype',\n    'model',\n    'variant',\n    'literature'\n  ],\n\n  homolog: [\n    'gene'\n  ],\n\n  interaction: [\n    'gene'\n  ],\n\n  literature: [\n    'disease'\n  ],\n\n  model: [\n    'disease',\n    'gene',\n    'genotype',\n    'phenotype',\n    'variant',\n    'literature'\n  ],\n\n  orthoPhenotype: [\n    'gene'\n  ],\n\n  orthoDisease: [\n    'gene'\n  ],\n\n  pathway: [\n    'disease',\n    'gene'\n  ],\n\n  phenotype: [\n    'disease',\n    'gene',\n    'genotype',\n    'variant',\n    'literature'\n  ],\n\n  variant: [\n    'disease',\n    'gene',\n    'phenotype',\n    'model',\n    'genotype',\n    'literature'\n  ]\n};\n\nexport async function getCounts(nodeId, nodeType, countType) {\n  if (countType !== 'literature') {\n    countType += 's';\n  }\n  const bioentityUrl = `${biolink}bioentity/${nodeType}/${nodeId}/${countType}`;\n  // console.log('getCounts', nodeId, nodeType, countType);\n  const bioentityParams = {\n    fetch_objects: false,\n    unselect_evidence: true,\n    exclude_automatic_assertions: false,\n    use_compact_associations: true,\n    rows: 1\n  };\n  const bioentityResp = await axios.get(bioentityUrl, { params: bioentityParams });\n  const bioentityResponseData = bioentityResp.data;\n  // console.log(bioentityResp.request.responseURL);\n  // console.log(bioentityResponseData);\n\n  return bioentityResponseData;\n}\n\nasync function getCountsForNode(nodeId, nodeType) {\n  const associationTypes = nodeAssociationTypes[nodeType];\n\n  if (associationTypes) {\n    const promisesArray = associationTypes.map((a) => {\n      const countPromise = getCounts(nodeId, nodeType, a);\n      return countPromise;\n    });\n\n    const associationsResult = await Promise.all(promisesArray);\n\n    const associationsResultMap = {};\n    associationTypes.forEach((a, index) => {\n      const aResult = associationsResult[index].numFound;\n      associationsResultMap[a] = {\n        facetCount: aResult,\n        totalCount: aResult\n      };\n    });\n\n    return associationsResultMap;\n  }\n  console.log('getCountsForNode', nodeId, nodeType, 'NO ASSOCIATIONS KNOWN');\n  return null;\n}\n\nexport async function getNodeSummary(nodeId, nodeType) {\n  const bioentityUrl = `${biolink}bioentity/${nodeType}/${nodeId}`;\n  // console.log('getNodeSummary bioentityUrl', nodeId, nodeType, bioentityUrl);\n  const bioentityParams = {\n    fetch_objects: true,\n    unselect_evidence: false,\n    exclude_automatic_assertions: false,\n    use_compact_associations: false,\n    rows: 100\n  };\n  const bioentityResp = await axios.get(bioentityUrl, { params: bioentityParams });\n  const bioentityResponseData = bioentityResp.data;\n\n  if (!bioentityResponseData.xrefs) {\n    bioentityResponseData.xrefs = [\n      {\n        'url': '',\n        'label': 'BioLink:FIXME/xrefs',\n        'blank': false\n      }\n    ];\n  }\n\n  const graphUrl = `${biolink}graph/node/${nodeId}`;\n  const graphResponse = await axios.get(graphUrl);\n  // console.log('getNodeSummary graphUrl', nodeId, nodeType, graphUrl);\n  const graphResponseData = graphResponse.data;\n  // console.log(graphResponseData);\n  bioentityResponseData.edges = graphResponseData.edges;\n  bioentityResponseData.nodes = graphResponseData.nodes;\n  // console.log(bioentityResponseData.edges);\n  // console.log(bioentityResponseData.nodes);\n\n  // const assUrl = `${biolink}bioentity/${nodeId}/associations`;\n\n  const countsMap = await getCountsForNode(nodeId, nodeType);\n\n  bioentityResponseData.counts = countsMap;\n\n  return bioentityResponseData;\n}\n\nexport function getNeighborhoodFromResponse(response) {\n  const nodeId = response.id;\n\n  const nodeLabelMap = {};\n\n  const equivalentClasses = [];\n  const superclasses = [];\n  const subclasses = [];\n\n  if (response.nodes) {\n    response.nodes.forEach((node) => {\n      nodeLabelMap[node.id] = node.lbl;\n    });\n  }\n  if (response.edges) {\n    response.edges.forEach((edge) => {\n      if (edge.pred === 'subClassOf') {\n        if (edge.sub === nodeId) {\n          // console.log('Superclass Edge', edge.sub, edge.pred, edge.obj);\n          superclasses.push(edge.obj);\n        }\n        else if (edge.obj === nodeId) {\n          // console.log('Subclass Edge', edge.sub, edge.pred, edge.obj);\n          subclasses.push(edge.sub);\n        }\n        else {\n          // console.log('BAD', edge.sub, edge.pred, edge.obj);\n        }\n      }\n      else if (edge.pred === 'equivalentClass') {\n        // console.log('Equiv Edge', edge.sub, edge.pred, edge.obj);\n\n        if (edge.sub === nodeId) {\n          // console.log('Skip duplicate equiv class', nodeId, edge.sub, edge.obj);\n        }\n        else {\n          equivalentClasses.push(edge.sub);\n        }\n      }\n    });\n  }\n\n  return {\n    nodeLabelMap,\n    equivalentClasses,\n    superclasses,\n    subclasses\n  };\n}\n\n\nexport async function getSearchResults(query, start, rows) {\n  const bioentityUrl = `${biolink}search/entity/${query}`;\n  const bioentityParams = {\n    fetch_objects: false,\n    unselect_evidence: true,\n    exclude_automatic_assertions: false,\n    use_compact_associations: true,\n    rows,\n    start,\n  };\n  const bioentityResp = await axios.get(bioentityUrl, { params: bioentityParams });\n  const bioentityResponseData = bioentityResp.data;\n\n  return bioentityResponseData;\n}\n\n\nexport async function getSearchTermSuggestions(term, selected, numRows='10') {\n  const baseUrl = `${biolink}search/entity/autocomplete/`;\n  const urlExtension = `${baseUrl}${term}`;\n  const params = new URLSearchParams();\n\n  params.append('rows', numRows);\n  params.append('start', 0);\n  params.append('highlight_class', 'hilite');\n  params.append('boost_q', 'category:genotype^-10');\n  if (selected.toString() === 'gene') {\n    params.append('boost_fx', 'pow(edges,0.334)');\n    params.append('prefix', 'NCBIGene');\n  }\n  if (selected.toString() === 'Phenotype') {\n    params.append('prefix', 'HP');\n    params.append('prefix', 'MONDO');\n\n  }\n  params.append('prefix', '-OMIA');\n  const returnedPromise = new Promise((resolve, reject) => {\n    axios.get(urlExtension, { params })\n      .then((resp) => {\n        const responseData = resp.data;\n        if (typeof responseData !== 'object') {\n          reject(responseData);\n        }\n        else {\n          resolve(responseData);\n        }\n      })\n      .catch((err) => {\n        reject(err);\n      });\n  });\n\n  return returnedPromise;\n}\n\n\nexport function getNodeAssociations(nodeType, identifier, cardType, params) {\n  const baseUrl = `${biolink}bioentity/`;\n  const biolinkAnnotationSuffix = getBiolinkAnnotation(cardType);\n  const urlExtension = `${nodeType}/${identifier}/${biolinkAnnotationSuffix}`;\n  const url = `${baseUrl}${urlExtension}`;\n  const returnedPromise = new Promise((resolve, reject) => {\n    axios.get(url, { params })\n      .then((resp) => {\n        const responseData = resp;\n        if (typeof responseData !== 'object') {\n          reject(responseData);\n        }\n        else {\n          resolve(responseData);\n        }\n      })\n      .catch((err) => {\n        reject(err);\n      });\n  });\n  return returnedPromise;\n}\n\nexport function getNodeLabelByCurie(curie) {\n  const baseUrl = `${biolink}bioentity/${curie}`;\n  const params = {\n    fetch_objects: true,\n    rows: 100\n  };\n  const returnedPromise = new Promise((resolve, reject) => {\n    axios.get(baseUrl, { params })\n      .then((resp) => {\n        const responseData = resp;\n        if (typeof responseData !== 'object') {\n          reject(responseData);\n        }\n        else {\n          resolve(responseData);\n        }\n      })\n      .catch((err) => {\n        reject(err);\n      });\n  });\n  return returnedPromise;\n}\n\nexport function comparePhenotypes(phenotypesList, geneList, species = 'all', mode = 'search') {\n  const baseUrl = 'https://beta.monarchinitiative.org/analyze/phenotypes.json?';\n  const params = new URLSearchParams();\n  const phenoCuries = phenotypesList.map(elem => elem.curie);\n  params.append('input_items', phenoCuries);\n  params.append('gene_items', geneList);\n  params.append('target_species', species);\n  params.append('mode', mode);\n  const returnedPromise = new Promise((resolve, reject) => {\n    axios.get(baseUrl, { params })\n      .then((resp) => {\n        const responseData = resp;\n        if (typeof responseData !== 'object') {\n          reject(responseData);\n        }\n        else {\n          resolve(responseData);\n        }\n      })\n      .catch((err) => {\n        reject(err);\n      });\n  });\n  return returnedPromise;\n}\n\nexport function debugServerName() {\n  return (serverConfiguration.app_base.length > 0)\n    ? serverConfiguration.app_base\n    : 'https://beta.monarchinitiative.org';\n}\n"]}]}